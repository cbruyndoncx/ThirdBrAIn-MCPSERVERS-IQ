name: TypeScript

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detect-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.find-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - name: Find JS packages
        id: find-packages
        working-directory: src
        run: |
          PACKAGES=$(find . -name package.json -not -path "*/node_modules/*" -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  build:
    needs: [detect-packages]
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.packages) }}
    name: Build ${{ matrix.package }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        working-directory: src/${{ matrix.package }}
        run: npm ci

      - name: Build package
        working-directory: src/${{ matrix.package }}
        run: npm run build

  publish:
    runs-on: ubuntu-latest
    needs: [build, detect-packages]
    if: github.ref == 'refs/heads/main'
    environment: release
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.packages) }}
      fail-fast: false
    continue-on-error: true
    name: Publish ${{ matrix.package }}

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        working-directory: src/${{ matrix.package }}
        run: npm ci

      - name: Check if version exists
        id: version_check
        working-directory: src/${{ matrix.package }}
        run: |
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          if npm view "$PKG_NAME@$PKG_VERSION" version &> /dev/null; then
            echo "Version $PKG_VERSION already exists for $PKG_NAME, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $PKG_VERSION is new for $PKG_NAME, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish package
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: src/${{ matrix.package }}
        run: npm publish # --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
